version: 2.1

orbs:
  python: circleci/python@1.5.0

jobs:
  tox:
    docker:
      - image: cimg/python:3.11.2
    steps:
      - checkout
      - run:
          name: Check relevant file changes
          command: |
            cur_branch=$(git rev-parse --abbrev-ref HEAD)
            changed_files=$(git diff $cur_branch --name-only -r main)
            echo $changed_files
            if ! grep -q 'merqube_client_lib/|tests/|integration_tests/|.circleci/' $changed_files; then
              # No files in src/ or tests/ have changed
              echo "Skipping tox job because no files in merqube_client_lib/ or tests/ have changed."
              circleci step halt
            else
                echo "Running tox job"
            fi
      - restore_cache:
          keys:
            # Need this to invalidate cache when lock changes, see:
            # https://circleci.com/docs/caching
            - v1-dependencies-{{ checksum "poetry.lock" }}
            # Add a cache key for the Poetry virtual environment
            - v1-poetry-{{ checksum "pyproject.toml" }}
      - python/install-packages:
          pkg-manager: pip
          pip-dependency-file: .circleci/circle-ci-deps.txt
      - run:
          name: Run tests
          command: tox -e lint,unit,integration
      - save_cache:
          paths:
            - $HOME/.cache/pypoetry/virtualenvs
          key: v1-poetry-{{ checksum "pyproject.toml" }}

  publish:
    docker:
      - image: cimg/python:3.11.2
    steps:
      - checkout
      - run:
          name: Check pyproject changes
          command: |
            # this lookup is different, since we are looking for the last commit
            changed_files=$(git diff --name-only HEAD HEAD~1)
            if ! grep -q 'pyproject.toml' $changed_files; then
              echo "Skipping merge job since no version bump occurred"
              circleci step halt
            fi
      - python/install-packages:
         pkg-manager: pip
         pip-dependency-file: .circleci/circle-ci-deps.txt
      - run:
         name: Install dependencies
         command: poetry install
      - run:
         name: Publish package to PyPI
         command: poetry publish --build -u __token__ -p $PYPI_API_TOKEN
      - run:
         name: Git tag
         command: make tag

# Helpful:
# https://circleci.com/docs/variables
# https://circleci.com/docs/configuration-reference
workflows:
  pr-tox:
    when:
      not:
        # run tox on all branches except main since we require linear history
        equal: [ main, << pipeline.git.branch >> ]

    jobs:
      - tox

  merge-publish-pypi:
    when:
      # Publish to PYPI on merge to main
      equal: [ main, << pipeline.git.branch >> ]
    jobs:
      - publish
